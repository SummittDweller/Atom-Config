# Rebuild Old Drupal 6 Site in Docksal

So, I forked https://github.com/davekopecek/docksal-d6-starter to https://github.com/SummittDweller/docksal-d6-starter and added a `.docksal/docksal-local.env` file there with one line...  `VIRTUAL_HOST=drupal6.docksal`.  

Next, using `Finder`, I copied the following from the backup of the old `IGO` site like so...

From /iMac500GB/MM2GCS/drupal/ | To /Users/markmcfate/Documents/Migrations/docksal-d6-starter/docroot/
--- | ---
sites/all/libraries | sites/all/libraries
sites/all/modules/contrib | sites/all/modules/contrib
sites/all/themes/igo_theme | sites/all/themes/igo_theme
sites/Files/igo | sites/Files/igo  
sites/all/modules/custom/abandoned.igo | sites/all/modules/custom/igo  

Then `cd /Users/markmcfate/Documents/Migrations/docksal-d6-starter` and `fin up`.  The site comes up with a WSOD at http://drupal6.docksal, but http://drupal6.docksal/install.php works!  So, I proceeded to install Drupal in English with a `System Admin` super-user and a password matching my old one for the `IGO`.  It takes a few minutes, but it works.  

Next, I did a `fin bs` (*BackStop*) and saved the `default` SQL dump to `./data/.out-of-the-way/default.sql`.  Then I tried running `fin slb` (Start from Last Backup) with a full SQL backup of the old site stored in `./data/default-IowaGeocachersOrg-2018-11-11T12-40-12-FULL.sql`.  That didn't work, presumably because the file is huge and takes a long time to load, longer than the `cli` service provides.

So, I did this instead...
```
Mark-iMac:docksal-d6-starter markmcfate$ fin db import data/default-IowaGeocachersOrg-2018-11-11T12-40-12-FULL.sql
Truncating default database...
bash: mysql: command not found
There were errors during truncation. Continue anyways? [y/n]: y
Importing default-IowaGeocachersOrg-2018-11-11T12-40-12-FULL.sql...
Done
```

That ALMOST worked!  It took several minutes, but the site now comes up at http://drupal6.docksal/ but the theme will not render properly.  Investigating that now.

So I tried logging in as `System Admin` but got this error when I looked at `fin logs`...

```
web_1  | [Thu Dec 27 16:58:35 2018] [error] [client 192.168.144.5] FastCGI: server "/usr/lib/cgi-bin/php5-fcgi" stderr: PHP message: PHP Fatal error:  Call to undefined function web_site_stats() in /var/www/docroot/includes/common.inc(1769) : eval()'d code on line 2
```

I found the missing function, `web_site_stats()` in the `./sites/all/modules/custom/abandoned.igo` directory so, as shown in the table above, I put a copy of that code in `.sites/all/modules/custom/igo`.  When I attempted to run `http://drupal6.docksal/install.php` I was informed that the site was still initialized, so I ran `http://drupal6.docksal/update.php` and the site came back OK, almost.

I needed to clear caches to try and fix some things so I found this command...

```
Mark-iMac:docksal-d6-starter markmcfate$ fin @docksal-d6-starter drush cc all
```

And now the site is back again, but still without the theme working properly.  No worries, I'm going to do a `fin bs` to capture this new state anyway, and move it like so, and...

```
mv -f default data/default-27-Dec-2018.sql
fin up
```

## Site Administration

With the site back up, and me logged in as `System Admin`, I found that the tilde (~) key works as expected, it brings up the top admin menu like it always did before.  Let's put that to use!

I visited http://drupal6.docksal/admin/build/themes and found that the `igo_theme` was NOT recognized as available; no wonder it doesn't work!  So I moved that theme folder from `./docroot/sites/all/themes/igo_theme` to `.docroot/sites/default/themes/igo_theme` and flushed the cache again.  Still no good.  Maybe a permissions issue?  I set nearly all of the directories below `./docroot/sites/` with `chmod 777` and will try again after another clearing of the caches... but it still won't come up so I'm enabling the base `Wilderness` theme and making it the default.

## Backup, Again

Next, I did another `fin bs` and moved the result to `./data`, then made a backup copy of the entire `docksal-d6.starter` directory to `iMac500GB`.  Then I renamed the directory to `igo6-docksal` and changed the URL inside `.docksal/docksal-local.env`.  When I came back to the `igo6-docksal` project and did `fin slb`, the `cli` and `web` containers once again started too fast for `db`, so I did this again...

```
Mark-iMac:igo6-docksal markmcfate$ fin db import data/default-27-Dec-2018.sql
Truncating default database...
bash: mysql: command not found
There were errors during truncation. Continue anyways? [y/n]: y
Importing default-27-Dec-2018.sql...
Done
```

And the site is back as it should be!

## Roles

I have added all the necessary user roles from `igo6-docksal` into `igo-backdrop`.  The machine names for all the roles are:

  - anonymous
  - authenticated
  - administrator
  - bod
  - editor
  - membership_manager
  - officer
  - store_keeper
  - supporting_member
  - voter

## Adminer

Now I'm installing `Adminer` in `igo6-docksal` AND `igo-backdrop` so that I can have a good look at the *default* database in both...

```
fin addon install adminer
```

Then I visited http://adminer.igo6.docksal and http://adminer.igo-backdrop.docksal where I logged in with `root / root`.  From the `igo6` copy of `Adminer` I subsequently dumped ALL of the data to a set of .csv files, one file per table.  The dumped files are on `iMac5000GB` in a directory named `default-database-from-igo6-docksal`.

## `fin bs` and `fin slb`

`fin bs`, where `bs` stands for `BackStop`, is a custom *Docksal* command that comes with the *Backdrop* example.  It can be used to make an *SQL* dump of the existing *Docksal* project and then stop the project like `fin stop` would.  This command, in my case, produces a *SQL* dump named `default`, the name of the database, in the project directory.  *Docksal*'s *Backdrop* example also provides the counterpart `fin slb`, 'Start from Last Backup', command which looks in the project's `./data` directory for any file named `default*.sql`, and imports that *SQL* automatically when bringing up the project.

## New `fin backup` Command

`fin bs` is great, but I wanted something a little more 'custom', so I copied the `bs` script inside `./.docksal/commands` and made `backup` like so:

```
#!/usr/bin/env bash
## Backup default database with customizations from 'bs'.
## Usage:   fin backup
## Parameters:
##      none
## Results:
##      Creates /project-dir/data if it doesn't exist
##      Backs up database to /project-dir/data/default-mm-dd-yy-HHMMSS.sql
##      rsync a backup copy of the entire project to /Volumes/iMac500GB/

BACKUP_PATH="${PROJECT_ROOT}/data"
PROJ=`basename ${PROJECT_ROOT}`
BACKUP_FILE="${BACKUP_PATH}/default-$(date +%F-%H%M%S).sql"

if [ ! -d "${BACKUP_PATH}" ]; then
  echo create backup directory $BACKUP_PATH
  mkdir "${BACKUP_PATH}"
  ls -al ..
fi

echo "moving all files in ./data to ./data/.keep so as not to accumlate too much gunk"
mv -f ${BACKUP_PATH}/* ${BACKUP_PATH}/.keep/

echo "dump SQL of 'default' database to $BACKUP_FILE and gzip it"
fin db dump "${BACKUP_FILE}"
gzip ${BACKUP_FILE}

echo "rsync project to /Volumes/iMac500GB/${PROJ}"
rsync -aruvi ${PROJECT_ROOT}/. /Volumes/iMac500GB/${PROJ}/
```

This command script, along with an update of `./.docksal/docksal.yml`, also incorporates *Docksal*'s automatic database import as documented at https://docs.docksal.io/service/db/import/.  So, a simple `fin up` command for the project should launch everything AND restart `db` with an import of the last `fin backup` already intact making `fin slb` obsolete.

## User Import Causing Problems

Whenever I try to visit my account, http://igo-backdrop.docksal/user/1, I get a fatal error due to the `User Import` module.  Since I already have all the users imported I'm disabling that module now, and that appears to have fixed the problem!

## Importing User/Account Data

Starting with the `users` and `users_roles` .csv files, I opened each file in `Numbers`, edited columns and some of the data, then saved the edits to a new .csv file.  Then, using http://convertcsv.com/csv-to-sql.htm converted the new .csv into a *MySQL* `insert` script and used http://adminer.igo-backdrop.docksal to import the data into the new *Backdrop* site.  Rinse and repeat as necessary.  Via this technique I was able to populate all of the following tables/fields:

  - field_data_age_18
  - field_data_field_address_city
  - field_data_field_address_state
  - field_data_field_address_zip
  - field_data_field_dob
  - field_data_field_geocaching_name
  - field_data_field_name_first
  - field_data_field_name_last
  - field_data_field_name_org
  - field_data_field_paf_number
  - field_data_field_phone_number
  - field_data_field_welcome

The .sql for each of these fields is stored in `./sql/<table name>.sql` and the raw dumped .csv data from IGO's old v6 database is stored in `Numbers` form as `./igo6-data.numbers`.

## Installing Bootstrap Lite Theme and Customizations

I can't install modules or themes using the provided 'installation queue' methods so I'm going to do the following instead:

  1) Locate the module or theme in GitHub - For `Bootstrap Lite` that's https://github.com/backdrop-contrib/bootstrap_lite.
  2) Open a shell into the `cli` container using `fin bash` and navigate to `/var/www/docroot/themes`.
  3) `git clone https://github.com/backdrop-contrib/bootstrap_lite.git`
  4) Return to the site at http://igo-backdrop.docksal/admin/appearance and enable `Bootstrap Lite`.  Make it the default.
  5) Then I played with the theme a little, selected a `Bootswatch` supported theme that I liked and added a suitable logo image to the header block.
  6) Now I want to customize the CSS, so it looks like I need to make a sub-theme to isolate my changes from the original.  https://api.backdropcms.org/documentation/creating-sub-themes to the rescue.
  7) I created `./docroot/themes/igo_subtheme` as directed.
  8) The sub-theme is working nicely so I've started adding pages, blog posts, and theme changes.  Nice!

## Pushing to Production

Things are working so well, time to try and break it.  I'm going to attempt using *Port-Ability* to deploy this stack so I've done the following:

1) Moved the project root from `~/igo-backdrop` to `~/Stacks/igo-backdrop`.
2) Changed `docroot` directory to `html`.
3) Changed `data` directory to `mariadb-init`.
4) Modified `fin backup` accordingly.
5) Added a *Port-Ability* structured `docker-compose.yml` file to the project root.
    - Uses some `wodby` images for PHP, MariaDB and Nginx.
6) Adding necessary environment variables to my `~/Port-Ability/_master/.master.env` file.

Not working!  So I'm going to take a look at https://linuxconfig.org/lemp-linux-nginx-mariadb-php-stack-docker-image-deployment instead.

## Another Approach

Following the direction at https://www.digitalocean.com/community/tutorials/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-ubuntu-16-04...

```
Marks-MacBook-Air:igo-backdrop mark$ rsync -aruvi . mark@104.248.237.235:/home/mark/igo-backdrop/ --progress
mark@docker-s-2vcpu-4gb-nyc1-01:~$ curl -fsSL get.docksal.io | bash
```

```
docker network create proxy
fin up
docker stop c61 fec fd7   <-- stop vhost, ssh and dns
docker run -d \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v $PWD/traefik.toml:/traefik.toml \
  -v $PWD/acme.json:/acme.json \
  -p 80:80 \
  -p 443:443 \
  -l traefik.frontend.rule=Host:traefik.iowageocachers.org \
  -l traefik.port=8080 \
  --network proxy \
  --name traefik \
  traefik:1.3.6-alpine --docker
```

Yay!  This ALMOST works.  https://www.iowageocachers.org comes up but is not properly proxied so the theme doesn't render properly.

## Gitter Post

Been away from discussions here for awhile so please forgive the length of this post, especially considering that it is New Year's Eve...

So, in the last week I finally managed to spin up a nice little *Backdrop* project using Docksal as a starting point.  As always, Docksal Rocks!  

Next challenge is getting my creation to production on a DigitalOcean droplet of mine and I've been looking quite a bit at https://github.com/docksal/docksal/issues/844.  On my droplet I like to run *Traefik* to queue requests into Docker containers following the directions listed at https://www.digitalocean.com/community/tutorials/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-ubuntu-16-04.

I've had some success thus far by...

  - installing Docksal on the droplet,
  - configuring *Traefik* as needed,
  - adding *Traefik* labels and network references to my `docksal.yml`,
  - creating *Traefik's* `proxy` network as directed,
  - doing `fin up` to launch everything,
  - using `docker stop` to terminate the vhost-proxy, ssh-agent, and DNS services to free up the ports they otherwise grab,
  - then launching *Traefik* to route it all.

It almost works as intended, but my theme modifications aren't all in play so something's not right with the networking yet.  

So, the question I have... Is there an easy way to `fin up` without the three services that I don't need in my production instance?

```
mark@docker-s-2vcpu-4gb-nyc1-01:~/igo-backdrop/.docksal$ fin dc config
networks:
  internal:
    external: false
  proxy:
    external: true
    name: proxy
services:
  adminer:
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: price
      ADMINER_PLUGINS: tables-filter tinymce
    hostname: adminer
    image: adminer
    labels:
      io.docksal.virtual-host: adminer.iowageocachers.org
  cli:
    dns:
    - 192.168.64.100
    - 8.8.8.8
    environment:
      BLACKFIRE_CLIENT_ID: null
      BLACKFIRE_CLIENT_TOKEN: null
      DOCROOT: html
      GIT_USER_EMAIL: ''
      GIT_USER_NAME: ''
      HOST_GID: '1001'
      HOST_UID: '1001'
      SECRET_ACAPI_EMAIL: null
      SECRET_ACAPI_KEY: null
      SECRET_PLATFORMSH_CLI_TOKEN: null
      SECRET_SSH_PRIVATE_KEY: null
      SECRET_TERMINUS_TOKEN: null
      VIRTUAL_HOST: iowageocachers.org
      XDEBUG_CONFIG: remote_connect_back=0 remote_host=192.168.64.1
      XDEBUG_ENABLED: '0'
    hostname: cli
    image: docksal/cli:2.1-php5.6
    networks:
      internal: null
    volumes:
    - docksal_ssh_agent:/.ssh-agent:ro
    - cli_home:/home/docker:rw
    - project_root:/var/www:rw,nocopy
  db:
    dns:
    - 192.168.64.100
    - 8.8.8.8
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: null
      MYSQL_DATABASE: default
      MYSQL_INITDB_SKIP_TZINFO: null
      MYSQL_ONETIME_PASSWORD: null
      MYSQL_PASSWORD: user
      MYSQL_RANDOM_ROOT_PASSWORD: null
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
    hostname: db
    image: docksal/db:1.1-mysql-5.6
    networks:
      internal: null
    ports:
    - 0:3306/tcp
    volumes:
    - /home/mark/igo-backdrop/mariadb-init:/docker-entrypoint-initdb.d:ro
    - db_data:/var/lib/mysql:rw
    - project_root:/var/www:ro,nocopy
  web:
    container_name: web_docksal_igo
    depends_on:
      cli:
        condition: service_started
    dns:
    - 192.168.64.100
    - 8.8.8.8
    environment:
      APACHE_BASIC_AUTH_PASS: null
      APACHE_BASIC_AUTH_USER: null
      APACHE_DOCUMENTROOT: /var/www/html
    hostname: web
    image: docksal/web:2.1-apache2.4
    labels:
      io.docksal.cert-name: none
      io.docksal.permanent: "false"
      io.docksal.project-root: /home/mark/igo-backdrop
      io.docksal.virtual-host: iowageocachers.org,*.iowageocachers.org,iowageocachers.org.*
      traefik.backend: web_docksal_igo
      traefik.docker.network: proxy
      traefik.frontend.rule: Host:www.iowageocachers.org
      traefik.port: '80'
    networks:
      internal: null
      proxy: null
    volumes:
    - project_root:/var/www:ro,nocopy
version: '2.1'
volumes:
  cli_home: {}
  db_data: {}
  docksal_ssh_agent:
    external: true
    name: docksal_ssh_agent
  project_root:
    driver: local
    driver_opts:
      device: /home/mark/igo-backdrop
      o: bind
      type: none
```
